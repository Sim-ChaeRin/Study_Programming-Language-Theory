📘 프로그래밍 언어의 발전 및 동작 원리 핵심 요약

1.

"프로그램 저장 방식의 에드박이 등장하면서 프로그램이라는 개념이 등장하게 되었다."

설명:

**에드박(EDVAC)**은 1940년대 후반에 개발된 초기 컴퓨터로, 폰 노이만 구조를 기반

이 구조는 프로그램(명령어)과 데이터를 같은 기억장치에 저장하는 방식을 의미

(이 방식이 나오기 전에는 기계에 물리적으로 배선하거나 스위치를 조작해야 프로그램을 변경할 수 있었음)

에드박의 등장은 "소프트웨어"라는 개념이 가능하게 되었고, 이후 프로그래밍 언어도 발전하게 된 결정적 계기가 됨


2.

"1950년대 초기 프로그래밍 언어로 Fortran은 수식 계산, 변수, 대입문, 함수, 제어문의 초기 형태를, Algol은 제어 구조 개념을, LISP는 함수형 언어 개념을 소개하였다."

설명:

- Fortran (1957): 과학 계산용으로 만들어졌고, 최초의 고급 언어 중 하나

    수학 수식처럼 프로그래밍할 수 있도록 도와줬고,
    
    변수, 대입문, 조건문, 반복문 등 지금 우리가 쓰는 기본적인 문법의 시초가 됨

- Algol (1958): 알고리즘 기술용 언어로, 블록 구조, 중첩 함수, 명확한 문법 체계를 도입

    현대 많은 언어들(C, Java 등)의 문법에 영향을 준 언어

- LISP (1958): 함수형 프로그래밍의 시초.

    리스트 처리, 재귀 함수, 수학적 함수 개념에 중점을 둔 언어.



3.

"1960년대 발표된 Cobol은 레코드를 통한 자료 구조 개념을 제시하였고, BASIC은 교육용 언어로서 큰 인기를 끌었으며, Simula는 객체지향 개념을 처음 소개하였다."

설명:

- COBOL (1959): 주로 비즈니스 처리용으로 만들어짐

    영어 문장처럼 읽히는 구문이 특징이고, **레코드(record)**라는 자료 구조(지금의 구조체와 유사)를 통해 데이터 중심 프로그래밍을 도입

- BASIC (1964): Beginners' All-purpose Symbolic Instruction Code의 약자

    대학 교육용으로 만들어졌고, 배우기 쉽고 사용하기 쉬워서 개인용 컴퓨터 시대에 큰 인기를 끌었음

- Simula (1967): Simula 67은 최초의 객체지향 언어로 평가받고 있음

    클래스, 객체, 상속 같은 **OOP(객체지향 프로그래밍)**의 핵심 개념을 포함하고 있음
    
    이후 C++, Java 등 객체지향 언어에 큰 영향을 줌


4.

"1970년대 가장 영향력이 높은 프로그래밍 언어는 C이다. Pascal은 구조화 프로그래밍의 교육용 언어로 자리 잡았고, 그 외 다양한 패러다임의 언어가 등장하였다."

설명:

- C (1972): 운영체제(특히 UNIX) 개발에 사용됨

    저수준 접근(메모리 조작 등)이 가능하면서도 고급 언어의 장점도 있는 실용적 언어
    
    많은 언어(C++, Java, C#, Go 등)의 기반이 됨

- Pascal (1970): 교육용으로 개발됨

    구조적 프로그래밍(제어 구조를 명확히 하고, 코드의 흐름을 논리적으로 작성)의 대표 언어
    
    함수와 절차 중심의 프로그래밍 교육에 사용됨
    
    이 시기엔 함수형, 논리형, 선언형 등 다양한 프로그래밍 패러다임의 시초들이 연구됨


5.

"1980년대에는 객체지향 개념이 더욱 견고해지고 다양한 언어 표준이 이루어졌다."

설명:

객체지향 개념이 이 시기에 실용적 프로그래밍 모델로 정착

- C++ (1983): C에 객체지향 개념을 추가한 언어

    이외에도 Smalltalk 등 객체지향 언어들이 널리 퍼짐
    
    또한 언어 표준화 작업이 본격화됨
    
    예: ANSI C, Ada, Standard ML 등
    
    이는 여러 플랫폼에서 일관성 있게 코드 작성이 가능하도록 해줌.


6.

"1990년대에는 Java와 JavaScript, Python을 필두로 하여 프로그래밍 언어의 대중화가 시작되었다."

설명:

- Java (1995): "한 번 작성하면 어디서든 실행된다"는 슬로건으로 플랫폼 독립성을 강조

    객체지향, 가상머신(JVM), 보안성 등의 특성을 가짐
    
    기업용, 웹, 모바일(Android)에서 큰 성공을 거둠

- JavaScript (1995): 웹 브라우저 내 스크립트 언어로 시작

    동적인 웹페이지 제작을 가능하게 했고, 이후 Node.js, 프론트엔드 프레임워크(React, Vue 등)로 확장됨

- Python (1991): 간결하고 읽기 쉬운 문법.

    초보자에게도 쉬우면서, 강력한 기능을 갖춤
    
    데이터 과학, 인공지능, 웹 개발, 자동화 등에 광범위하게 사용됨


7.

"인터프리터는 고급언어 프로그램으로 작성된 문장을 하나씩 읽어서 수행한다. 컴파일러는 고급언어 프로그램을 기계어로 미리 번역한다. 하이브리드 구현은 고급언어 프로그램을 중간 코드 형태로 컴파일하고 이 중간 코드를 가상기계상에서 해석한다."

설명:

- 인터프리터 (Interpreter): 프로그램을 실행할 때마다 한 줄씩 읽고 바로 실행함

    예: Python, JavaScript

- 컴파일러 (Compiler): 전체 프로그램을 한 번에 기계어로 번역하여 실행

    예: C, C++

하이브리드 방식: 프로그램을 **중간 코드(bytecode)**로 바꾼 다음, **가상 머신(VM)**에서 해석/실행

    예: Java (JVM 사용), C# (.NET CLR)


8.

"프로그래밍 언어의 요구사항으로 표현 풍부성, 유지 보수성, 실행 가능성이 있다."

설명:

프로그래밍 언어가 갖춰야 할 주요 특성:

- 표현 풍부성: 다양한 개념이나 기능을 직관적이고 명확하게 표현할

    예: 객체, 함수, 병렬 처리 등을 쉽게 표현할 수 있는 문법

- 유지 보수성: 코드가 이해하기 쉽고, 수정하기 쉬워야 함

    협업, 장기 프로젝트에 특히 중요

- 실행 가능성: 작성한 프로그램이 효율적으로 실행될 수 있어야 함

    빠르고 적은 자원을 사용하는 실행 성능


9.

"프로그래밍 언어의 평가 기준은 상충될 수 있기에 적절한 지점에서 절충해야 한다."

설명:

위에서 언급한 특성들(표현력, 성능, 유지보수성 등)은 서로 충돌할 수 있음
    성능을 극대화하려면 표현력이 낮아질 수 있고, 표현력이 높으면 실행 속도나 성능이 떨어질 수 있음
    따라서 모든 요구사항을 100% 만족시킬 수 없고, 특정 목적에 따라 절충점을 찾는 것이 중요함 (게임 개발에서는 성능 우선, 교육용 언어는 쉬운 문법 우선)
