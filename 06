📘 프로그래밍 언어 구현 핵심 요약


프로그래밍 언어 정의 요소

구문론(Syntax): 프로그램의 형태(문법 구조)를 정의

의미론(Semantics): 프로그램의 수행 의미(동작 방식)를 정의


언어 구현 방식

언어 구현은 함수 모델로 해석 가능

- 전통적인 언어: 실제 기계 명령어를 기반으로 구현

- 새로운 패러다임 언어: 추상기계를 중간에 두고 구현

  추상기계 vs 가상기계
  
    추상기계: 실제 구현 없이 개념적인 구조
    
    가상기계: 실제 실행 가능한 구현체가 존재 (예: JVM)


컴파일러 구현 단계

- 전단부 (Front-end): 언어에 따라 달라지는 분석 단계

- 후단부 (Back-end): 목적 기계에 따라 달라지는 코드 생성 단계


인터프리터 구현

전단부까지는 컴파일러와 동일하게 분석

이후 중간 표현을 직접 실행 (목적 코드로 변환하지 않음)


언어 구현에 필요한 주요 자료 구조

  1. 구문 트리:
  
    - 파스 트리(Parse Tree)
    
    - 추상 구문 트리(AST, Abstract Syntax Tree)
  
  2. 심볼 테이블(Symbol Table): 변수, 함수 등의 정보 저장
  
  3. 환경(Environment): 실행 시점의 변수 값 등 저장

    실행 환경 고려
    
    언어 구현 시, 프로그램이 실제로 동작하는 환경도 함께 설계되어야 함


어휘 분석기 vs 구문 분석기

  - 어휘 분석기(Lexical Analyzer): 코드에서 토큰을 추출
  
  - 구문 분석기(Syntax Analyzer): 토큰으로 구문 트리 구성
