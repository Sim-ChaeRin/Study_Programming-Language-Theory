📘 타입 핵심 요약

🔹 타입의 기본 개념
    타입(type): 데이터 집합과 연산 집합의 결합
    
    데이터 집합: 처리 대상이 되는 데이터들의 범위
    
    연산 집합: 해당 데이터에 적용 가능한 연산들의 집합

🔹 타입 안전성 (Type Safety)

  프로그램 내의 모든 연산과 함수가 정의된 타입 규칙을 위반하지 않으면 → 타입 안전함(type safe) 즉, 연산 전후의 타입이 정의된 타입과 일치해야 함

🔹 언어별 타입 강도
  강타입 언어 (Strongly Typed):	모든 타입 오류를 검출함	타입 안정성이 높음
  약타입 언어 (Weakly Typed):	일부 타입 오류를 허용함	타입 변환이 비교적 자유로움
  무타입 언어 (Untyped):	타입 선언이 없고 식별자의 타입이 계속 변함	대표적으로 초기 Lisp 계열 언어 등

🔹 타입의 정의 방식
  원시 타입 (Primitive Type):	언어가 기본적으로 제공하는 타입임
  사용자 정의 타입 (User-defined Type):	사용자가 직접 정의하는 타입임 (예: 열거형, 구조체 등)

🔹 데이터 형태에 따른 분류
  단순 타입 (Simple Type):	하나의 값만 다루는 기본 데이터 타입임	정수형, 실수형, 문자형, 논리형, 열거형 등
  복합 타입 (Composite Type):	여러 요소를 묶어 구성한 타입임	배열, 레코드, 구조체, 클래스 등

🔹 단순 타입의 세부 내용
🟩 정수형 (Integer Type)

데이터 집합: 정수 값의 집합 (범위는 비트 수에 따라 다름)

연산 집합: 사칙연산, 나머지 연산, 비트 연산, 관계 연산 등 포함


🟦 실수형 (Real / Floating Type)

데이터 집합: 실수 값의 집합 (지수부, 가수부 크기에 따라 다름)

연산 집합: 사칙연산, 관계 연산 등 포함


🟨 문자형 (Character Type)

데이터 집합: 문자들의 집합 (ASCII, Unicode 등)

연산 집합: 관계 연산 등 포함


🟥 논리형 (Boolean Type)

데이터 집합: 참(True), 거짓(False) 두 값으로 구성됨

연산 집합: 논리 연산(AND, OR, NOT 등) 포함


🟪 열거형 (Enumeration Type)

정의: 순서 관계가 있는 이름들의 집합을 데이터로 다루는 사용자 정의 타입

데이터 집합: 사용자가 지정한 이름들의 모임

연산 집합: 관계 연산 등 포함

각 이름은 0 이상의 정수에 대응되어 순서 관계를 가질 수 있음
