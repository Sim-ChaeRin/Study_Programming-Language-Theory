📘 프로그래밍 패러다임이란?

프로그래밍 패러다임은 프로그램을 작성하는 방식이나 사고방식

다양한 패러다임이 있고 각각 문제를 해결하는 방식이 다르다


🔧 주요 프로그래밍 패러다임

- 명령형 프로그래밍

  컴퓨터에게 무엇을 어떻게 할지 명령어로 하나하나 지시하는 방식.
  
  컴퓨터의 작동 방식(하드웨어 동작)과 가장 잘 맞음.


- 절차형 프로그래밍

  명령형의 한 종류.
  
  프로그램을 **여러 절차(함수, 루틴)**로 나누어 문제를 해결.
  
  대표 언어: C, Pascal 등


- 함수형 프로그래밍

  데이터를 값으로 취급하고 이 값들을 다루는 함수 중심으로 프로그램을 구성.
  
  상태 변화나 변수 사용을 최소화함.
  
  대표 언어: Haskell, Lisp, Scala 등


- 논리 프로그래밍

  프로그램을 논리적인 조건으로 표현하고 이 조건들을 이용해 결과를 추론.
  
  "어떻게"보다는 "무엇이 참인가"에 초점을 맞춤.
  
  대표 언어: Prolog
  
  참고: 선언형 프로그래밍의 일종


- 객체지향 프로그래밍 (OOP)

  데이터와 그 데이터를 처리하는 기능(메서드)을 객체라는 단위로 묶음.
  
  객체 간의 상호작용으로 프로그램을 구성.
  
  대표 언어: Java, C++, Python 등


📈 패러다임이 변화한 이유

응용 분야 변화: 새로운 문제들이 등장하면서 다른 방식의 접근이 필요해짐

구조 변화: 프로그램 크기가 커지면서 체계적인 구조 필요

계산 모델 변화: 병렬 처리, 인공지능 등 새로운 계산 방식 등장


🧩 기타 개념들

구조화 프로그래밍

goto 문 없이 프로그램을 구성하려는 접근.

프로그램 흐름을 더 이해하기 쉽게 만들기 위한 패러다임.

한 언어가 여러 패러다임 지원 가능

예: Python은 객체지향, 절차형, 함수형을 모두 지원

패러다임은 서로 대립적이지 않다

하나만 고집하기보다는 상황에 맞게 서로 보완적으로 사용하는 것이 좋음


✅ 한 줄 요약

프로그래밍 패러다임은 문제 해결을 위한 다양한 사고방식이며 각 패러다임은 서로 다른 방식으로 프로그램을 구성하지만, 서로 보완하면서 함께 사용될 수 있음
